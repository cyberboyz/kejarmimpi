swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
<<<<<<< HEAD
  /articles/:
    get:
      tags:
      - articles
      description: get Articles
      operationId: ArticlesController.Get All
=======
  /users/:
    get:
      tags:
      - users
      description: get Users
      operationId: UsersController.Get All
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
<<<<<<< HEAD
            $ref: '#/definitions/models.Articles'
        "403": {}
    post:
      tags:
      - articles
      description: create Articles
      operationId: ArticlesController.Post
      parameters:
      - in: body
        name: body
        description: body for Articles content
        required: true
        schema:
          $ref: '#/definitions/models.Articles'
      responses:
        "201":
          description: '{int} models.Articles'
        "403":
          description: body is empty
  /articles/{id}:
    get:
      tags:
      - articles
      description: get Articles by id
      operationId: ArticlesController.Get One
=======
            $ref: '#/definitions/models.Users'
        "403": {}
    post:
      tags:
      - users
      description: create Users
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "201":
          description: '{int} models.Users'
        "403":
          description: body is empty
  /users/{id}:
    get:
      tags:
      - users
      description: get Users by id
      operationId: UsersController.Get One
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
<<<<<<< HEAD
            $ref: '#/definitions/models.Articles'
=======
            $ref: '#/definitions/models.Users'
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
        "403":
          description: :id is empty
    put:
      tags:
<<<<<<< HEAD
      - articles
      description: update the Articles
      operationId: ArticlesController.Put
=======
      - users
      description: update the Users
      operationId: UsersController.Put
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
<<<<<<< HEAD
        description: body for Articles content
        required: true
        schema:
          $ref: '#/definitions/models.Articles'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Articles'
=======
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Users'
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
        "403":
          description: :id is not int
    delete:
      tags:
<<<<<<< HEAD
      - articles
      description: delete the Articles
      operationId: ArticlesController.Delete
=======
      - users
      description: delete the Users
      operationId: UsersController.Delete
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
<<<<<<< HEAD
  models.Articles:
    title: Articles
    type: object
    properties:
      Author:
        type: string
      Category:
        type: string
      Content:
        type: string
      CreatedAt:
        type: string
        format: string
      Id:
        type: integer
        format: int64
      Title:
        type: string
      UpdatedAt:
        type: string
        format: string
tags:
- name: articles
  description: |
    ArticlesController operations for Articles
=======
  models.Users:
    title: Users
    type: object
    properties:
      AvatarUrl:
        type: string
      Dream:
        type: string
      Email:
        type: string
      Hobby:
        type: string
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Password:
        type: string
      Phone:
        type: string
      Profession:
        type: string
      WebsiteUrl:
        type: string
tags:
- name: users
  description: |
    UsersController operations for Users
>>>>>>> c04e9a01b644836197e1df2c80f47c95f2c65430
